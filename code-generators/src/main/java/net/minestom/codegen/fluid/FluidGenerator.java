package net.minestom.codegen.fluid;

import com.google.gson.JsonObject;
import com.squareup.javapoet.*;
import net.minestom.codegen.MinestomCodeGenerator;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import net.minestom.codegen.util.GenerationHelper;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;

@ApiStatus.NonExtendable
@ApiStatus.Internal
public final class FluidGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(FluidGenerator.class);
    private final InputStream fluidsFile;
    private final File outputFolder;

    public FluidGenerator(@Nullable InputStream fluidsFile, @NotNull File outputFolder) {
        super("net.minestom.server.fluid");
        this.fluidsFile = fluidsFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (fluidsFile == null) {
            LOGGER.error("Failed to find fluids.json.");
            LOGGER.error("Stopped code generation for fluids.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }

        JsonObject fluids = GSON.fromJson(new InputStreamReader(fluidsFile), JsonObject.class);
        ClassName fluidClassName = ClassName.get(packageName, "Fluid");

        // Particle
        TypeSpec.Builder fluidClass = TypeSpec.enumBuilder(fluidClassName)
                .addSuperinterface(KEYORI_ADVENTURE_KEY)
                .addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());

        fluidClass.addField(
                FieldSpec.builder(NAMESPACE_ID_CLASS, "id")
                        .addModifiers(PRIVATE_FINAL_MODIFIERS).addAnnotation(NotNull.class).build()
        );
        // static field
        fluidClass.addField(
                FieldSpec.builder(ArrayTypeName.of(fluidClassName), "VALUES")
                        .addModifiers(CONSTANT_MODIFIERS)
                        .initializer("values()")
                        .build()
        );

        fluidClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(NAMESPACE_ID_CLASS, "id").addAnnotation(NotNull.class).build())
                        .addStatement("this.id = id")
                        .addStatement("$T.fluids.put(id, this)", REGISTRY_CLASS)
                        .build()
        );
        // Override key method (adventure)
        fluidClass.addMethod(GenerationHelper.ADVENTURE_KEY_METHOD);
        // getId method
        fluidClass.addMethod(
                MethodSpec.methodBuilder("getId")
                        .returns(TypeName.SHORT)
                        .addStatement("return (short) ordinal()")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getNamespaceID method
        fluidClass.addMethod(
                MethodSpec.methodBuilder("getNamespaceID")
                        .returns(NAMESPACE_ID_CLASS)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // toString method
        fluidClass.addMethod(GenerationHelper.TO_STRING);

        // fromId Method
        fluidClass.addMethod(
                MethodSpec.methodBuilder("fromId")
                        .returns(fluidClassName)
                        .addAnnotation(Nullable.class)
                        .addParameter(TypeName.SHORT, "id")
                        .beginControlFlow("if(id >= 0 && id < VALUES.length)")
                        .addStatement("return VALUES[id]")
                        .endControlFlow()
                        .addStatement("return null")
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );

        // Use data
        fluids.entrySet().forEach(entry -> {
            final String fluidName = entry.getKey();
            fluidClass.addEnumConstant(
                    extractNamespace(fluidName),
                    TypeSpec.anonymousClassBuilder(
                            "$T.from($S)",
                            NAMESPACE_ID_CLASS,
                            fluidName
                    ).build()
            );
        });

        // Write files to outputFolder
        writeFile(
                JavaFile.builder(packageName, fluidClass.build())
                        .indent(DEFAULT_INDENT)
                        .skipJavaLangImports(true)
                        .build(),
                outputFolder
        );
    }
}
